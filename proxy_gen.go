package main

// Code generated by MikaÃ«l's proxy generator. DO NOT EDIT.

import (
	"context"
)

type MyServiceProxy struct {
	original          *MyService
	invocationHandler func(interface {
		TypeName() string
		Name() string
		Invoke(args []any) []any
	}, []any) []any
}

type _MyServiceMethod struct {
	methodName string
	typeName   string
	method     func([]any) []any
}

func (m *_MyServiceMethod) Name() string {
	return m.methodName
}

func (m *_MyServiceMethod) TypeName() string {
	return m.typeName
}

func (m *_MyServiceMethod) Invoke(args []any) []any {
	return m.method(args)
}

func (d *MyServiceProxy) MyDecoratedMethod() {
	method := _MyServiceMethod{
		methodName: "MyDecoratedMethod",
		typeName:   "MyService",
		method: func(args []any) []any {
			d.original.MyDecoratedMethod()
			return []any{}
		},
	}

	var args []any
	d.invocationHandler(&method, args)
}

func (d *MyServiceProxy) MyContextMethod(ctx context.Context) {
	method := _MyServiceMethod{
		methodName: "MyContextMethod",
		typeName:   "MyService",
		method: func(args []any) []any {
			d.original.MyContextMethod(args[0].(context.Context))
			return []any{}
		},
	}

	var args []any = []any{ctx}
	d.invocationHandler(&method, args)
}

func (d *MyServiceProxy) MyFuncReturnsError(ctx context.Context, myType myUnexportedType) (string, error) {
	method := _MyServiceMethod{
		methodName: "MyFuncReturnsError",
		typeName:   "MyService",
		method: func(args []any) []any {
			result0, result1 := d.original.MyFuncReturnsError(args[0].(context.Context), args[1].(myUnexportedType))
			return []any{result0, result1}
		},
	}

	var args []any = []any{ctx, myType}
	results := d.invocationHandler(&method, args)
	return results[0].(string), results[1].(error)
}

func NewMyServiceProxy(delegate *MyService, invocationHandler func(method interface {
	TypeName() string
	Name() string
	Invoke(args []any) []any
}, args []any) (retVals []any)) *MyServiceProxy {
	if invocationHandler == nil {
		invocationHandler = func(method interface {
			TypeName() string
			Name() string
			Invoke(args []any) []any
		}, args []any) []any {
			return method.Invoke(args)
		}
	}

	return &MyServiceProxy{
		original:          delegate,
		invocationHandler: invocationHandler,
	}
}
